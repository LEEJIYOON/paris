using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
using System;


public class HeliMove : MonoBehaviour
{
    public AudioSource HelicopterSound;
    public ControlPanel ControlPanel;
    public Rigidbody HelicopterModel;
    public HeliRotorController MainRotorController;
    public HeliRotorController SubRotorController;

    //Helicopter Speed
    public float TurnForce = 0.02f;
    public float ForwardForce = 15f;
    public float ForwardTiltForce = 20f;
    public float TurnTiltForce = 30f;
    public float EffectiveHeight = 100f;
    public float turnTiltForcePercent = 1.5f;
    public float turnForcePercent = 1.3f;


    //public Text countText;
    public GameObject SpainText;
    public GameObject BerlinText;
    public GameObject GateText;
    public GameObject EiffelText;
    public GameObject CampnouText;
    public GameObject AngelText;
    public GameObject SpainexText;
    public GameObject EiffelexText;

    public static HeliMove instance;

    



    private float _engineForce;
    public float EngineForce
    {
        get { return _engineForce; }
        set
        {
            MainRotorController.RotarSpeed = value * 80;
            SubRotorController.RotarSpeed = value * 40;
            HelicopterSound.pitch = Mathf.Clamp(value / 40, 0, 1.2f);
            if (UIGameController.runtime.EngineForceView != null)
                UIGameController.runtime.EngineForceView.text = string.Format("Engine value [ {0} ] ", (int)value);

            _engineForce = value;
        }
    }

    private Vector2 hMove = Vector2.zero;
    private Vector2 hTilt = Vector2.zero;
    private float hTurn = 0f;
    public bool IsOnGround = true;
    string pressedKeyCode;

    /// Kinect manager settings ///

    // do not run Update() if there is no user
    KinectManager kinectManager = KinectManager.Instance;

    // the joint we want to track
    public KinectWrapper.NuiSkeletonPositionIndex RightHand = KinectWrapper.NuiSkeletonPositionIndex.HandRight;
    public KinectWrapper.NuiSkeletonPositionIndex LeftHand = KinectWrapper.NuiSkeletonPositionIndex.HandLeft;
    public KinectWrapper.NuiSkeletonPositionIndex SpineCenter = KinectWrapper.NuiSkeletonPositionIndex.Spine;
    public KinectWrapper.NuiSkeletonPositionIndex HeadCenter = KinectWrapper.NuiSkeletonPositionIndex.Head;

    public float speed;
    public float result; //determine clap action
    public float centerPerson;
    private Rigidbody rb;
    //private GestureListener gestureListener;

    public Vector3 RightHandPos;
    public Vector3 LeftHandPos;
    public Vector3 SpinePos;
    public Vector3 HeadPos;

    void Start()
    { 
        Cursor.visible = false;  // hide mouse cursor
        SpainText.SetActive(false); //text
        BerlinText.SetActive(false);
        GateText.SetActive(false);
        CampnouText.SetActive(false);
        EiffelText.SetActive(false);
        AngelText.SetActive(false);
        SpainexText.SetActive(false);
        EiffelexText.SetActive(false);

    }

    ////////////////////////////
    
    IEnumerator Spain() //Display Word
    {
        int count = 0;
        while (count<3)
        {
            SpainText.SetActive(true);
            SpainexText.SetActive(true);
            yield return new WaitForSeconds(2f);
            count++;
        }
        SpainText.SetActive(false);
        SpainexText.SetActive(false);
    }
    

    IEnumerator Berlin() //Display Word
    {
        int count = 0;
        while (count < 3)
        {
            BerlinText.SetActive(true);
            yield return new WaitForSeconds(2f);
            count++;
        }
        BerlinText.SetActive(false);
    }

    IEnumerator Gate() //Display Word
    {
        int count = 0;
        while (count < 3)
        {
            GateText.SetActive(true);
            yield return new WaitForSeconds(2f);
            count++;
        }
        GateText.SetActive(false);
    }
    IEnumerator Campnou() //Display Word
    {
        int count = 0;
        while (count < 3)
        {
            CampnouText.SetActive(true);
            yield return new WaitForSeconds(2f);
            count++;
        }
        CampnouText.SetActive(false);
    }
    IEnumerator Eiffel() //Display Word
    {
        int count = 0;
        while (count < 3)
        {
            EiffelText.SetActive(true);
            EiffelexText.SetActive(true);
            yield return new WaitForSeconds(2f);
            count++;
        }
        EiffelText.SetActive(false);
        EiffelexText.SetActive(false);
    }
    

    IEnumerator Angel() //Display Word
    {
        int count = 0;
        while (count < 3)
        {
            AngelText.SetActive(true);
            yield return new WaitForSeconds(2f);
            count++;
        }
        AngelText.SetActive(false);
    }


    void OnTriggerEnter(Collider other) //Collider : If I approach thing, then thing disappears, then we will show text
    {
        if (other.gameObject.CompareTag("Pick Up1"))
        {
            other.gameObject.SetActive(false);
           StartCoroutine(Spain());
           
        }
        if (other.gameObject.CompareTag("Pick Up2"))
        {
            other.gameObject.SetActive(false);
            StartCoroutine(Berlin());
        }
        if (other.gameObject.CompareTag("Pick Up3"))
        {
            other.gameObject.SetActive(false);
            StartCoroutine(Gate());
        }
        if (other.gameObject.CompareTag("Pick Up4"))
        {
            other.gameObject.SetActive(false);
            StartCoroutine(Campnou());
        }
        if (other.gameObject.CompareTag("Pick Up5"))
        {
            other.gameObject.SetActive(false);
            StartCoroutine(Eiffel());
            
        }
        if (other.gameObject.CompareTag("Pick Up6"))
        {
            other.gameObject.SetActive(false);
            StartCoroutine(Angel());
        }
    }

    void Awake()
    {
        if (HeliMove.instance == null)
            HeliMove.instance = this;
    }


    void Update()
    {
        KinectManager manager = KinectManager.Instance;

        if (manager && manager.IsInitialized())
        {

            if (manager.IsUserDetected())
            {
                uint userId = manager.GetPlayer1ID();

                if (manager.IsJointTracked(userId, (int)RightHand))
                {
                    RightHandPos = manager.GetJointPosition(userId, (int)RightHand);  // output the joint position for easy tracking
                }

                if (manager.IsJointTracked(userId, (int)LeftHand))
                {
                    LeftHandPos = manager.GetJointPosition(userId, (int)LeftHand);
                }

                if (manager.IsJointTracked(userId, (int)SpineCenter))
                {
                    SpinePos = manager.GetJointPosition(userId, (int)SpineCenter);
                }

                if (manager.IsJointTracked(userId, (int)HeadCenter))
                {
                    HeadPos = manager.GetJointPosition(userId, (int)HeadCenter);
                }

            }

            // Gestures //
            //Transform gesture to key
            if (RightHandPos.y > SpinePos.y && LeftHandPos.y < SpinePos.y) //Turn Left
            {
                pressedKeyCode = "A";
                Debug.Log("A");
            }

            if (RightHandPos.y < SpinePos.y && LeftHandPos.y > SpinePos.y) //Turn Right
            {
                pressedKeyCode = "D";
                Debug.Log("D");
            }

            if (RightHandPos.y > HeadPos.y && LeftHandPos.y > HeadPos.y) //Go upward
            {
                pressedKeyCode = "Shift";
                Debug.Log("Shift");
            }

            if (RightHandPos.z > SpinePos.z && LeftHandPos.z < SpinePos.z) //Go Foward
            {
                pressedKeyCode = "W";
                Debug.Log("w");

            }

            if (RightHandPos.z < SpinePos.z && LeftHandPos.z > SpinePos.z) //Go Backward
            {
                pressedKeyCode = "S";
                Debug.Log("S");

            }


            result = Math.Abs(LeftHandPos.x - RightHandPos.x);

            if (result < 0.4) //clap Go downward
            {
                pressedKeyCode = "Space";
            }

            this.OnKeyPressed();
        }
    }

    void FixedUpdate()
    {
        LiftProcess();
        MoveProcess();
        TiltProcess();
    }

    private void MoveProcess()
    {
        var turn = TurnForce * Mathf.Lerp(hMove.x, hMove.x * (turnTiltForcePercent - Mathf.Abs(hMove.y)), Mathf.Max(0f, hMove.y));
        hTurn = Mathf.Lerp(hTurn, turn, Time.fixedDeltaTime * TurnForce);
        HelicopterModel.AddRelativeTorque(0f, hTurn * HelicopterModel.mass, 0f);
        HelicopterModel.AddRelativeForce(Vector3.forward * Mathf.Max(0f, hMove.y * ForwardForce * HelicopterModel.mass));
    }

    private void LiftProcess()
    {
        var upForce = 1 - Mathf.Clamp(HelicopterModel.transform.position.y / EffectiveHeight, 0, 1);
        upForce = Mathf.Lerp(0f, EngineForce, upForce) * HelicopterModel.mass;
        HelicopterModel.AddRelativeForce(Vector3.up * upForce);
    }

    private void TiltProcess()
    {
        hTilt.x = Mathf.Lerp(hTilt.x, hMove.x * TurnTiltForce, Time.deltaTime);
        hTilt.y = Mathf.Lerp(hTilt.y, hMove.y * ForwardTiltForce, Time.deltaTime);
        HelicopterModel.transform.localRotation = Quaternion.Euler(hTilt.y, HelicopterModel.transform.localEulerAngles.y, -hTilt.x);
    }

    private void OnKeyPressed()
    {
        float tempY = 0;
        float tempX = 0;

        // stable forward 
        if (hMove.y > 0)
            tempY = -Time.fixedDeltaTime;
        else
            if (hMove.y < 0)
                tempY = Time.fixedDeltaTime;

        // stable lurn
        if (hMove.x > 0)
            tempX = -Time.fixedDeltaTime;
        else
            if (hMove.x < 0)
                tempX = Time.fixedDeltaTime;


      
        switch (pressedKeyCode) //press key
        {
            case "Shift":
                EngineForce += 0.1f;
                Debug.Log("entro");
                break;
            case "Space":
                EngineForce -= 0.12f;
                if (EngineForce < 0) EngineForce = 0;
                Debug.Log("entro2");
                break;

            case "W":
                if (IsOnGround) break;
                tempY = Time.fixedDeltaTime;
                Debug.Log("entro3");
                break;

            case "S":
                if (IsOnGround) break;
                tempY = -Time.fixedDeltaTime;
                Debug.Log("entro4");
                break;

            case "A":
                if (IsOnGround) break;
                tempX = -Time.fixedDeltaTime;
                Debug.Log("entro5");
                break;

            case "D":
                if (IsOnGround) break;
                tempX = Time.fixedDeltaTime;
                Debug.Log("entro6");
                break;
        }
        // }

        hMove.x += tempX;
        hMove.x = Mathf.Clamp(hMove.x, -1, 1);

        hMove.y += tempY;
        hMove.y = Mathf.Clamp(hMove.y, -1, 1);

    }

    private void OnCollisionEnter()
    {
        IsOnGround = true;
    }

    private void OnCollisionExit()
    {
        IsOnGround = false;
    }
}
